// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthService {
CREDENTIALS
GOOGLE
GITHUB
}

enum OtpType {
FORGOT_PASSWORD
RESET_PASSWORD
}

enum Role {
  USER
  ADMIN
}

model User {
    id        String      @id @default(uuid())
    firstName String
    lastName String
    password String?
    picture  String?
    role  Role    @default(USER)
    authService AuthService  @default(CREDENTIALS)
    email  String         @unique
    phone String?          @unique
    isConfirmed Boolean?   @default(false)
    emailVerified DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    medias Media[]
    reviewReactions ReviewReaction[]
    amenitiesOnReviews AmenitiesOnReview[]
    verificationTokens VerificationToken[]
    Otps Otp[]
    sessions  Session[]
    areas Area[]
    reviews  Review[]
}

model Session {
  id             String          @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  browser          String
  os                String
  invalidatedAt DateTime?
  createdAt      DateTime      @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
    id        String      @id @default(uuid())
    name      String
    state     String
    lga       String
    address   String
    longitude String
    latitude  String
    createdAt      DateTime      @default(now())
    updatedAt DateTime @updatedAt
      createdBy       User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String
    medias   Media[]
    reviews  Review[]
}

model Amenity {
  id    String                 @id @default(uuid())
  name  String
  reviews AmenitiesOnReview[]
}

model Review {
  id    String                 @id @default(uuid())
description String
rating      String
asAnonymous  Boolean? @default(false)
 area       Area     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId     String
 user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  amenities AmenitiesOnReview[]
  reviewReactions ReviewReaction[]
createdAt      DateTime      @default(now())
  updatedAt DateTime @updatedAt
}

model AmenitiesOnReview {
  review       Review     @relation(fields: [reviewId], references: [id])
  reviewId     String
  amenity Amenity @relation(fields: [amenityId], references: [id])
  amenityId String
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById     String

  @@id([reviewId, amenityId])
}

model Media {
    id    String                 @id @default(uuid())
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
}

model ReviewReaction {
  userId    String
  reviewId  String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review           @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    createdAt DateTime         @default(now())
    updatedAt DateTime @updatedAt

  @@id([userId, reviewId])
}

model VerificationToken {
    id           String      @id @default(uuid())
    token      String   @unique
    expires    DateTime
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Otp {
    id           String      @id @default(uuid())
    otp      String   @unique
    expires    DateTime
    type    OtpType
    createdAt DateTime @default(now())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}


