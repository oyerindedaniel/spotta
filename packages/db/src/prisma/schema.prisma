// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthService {
CREDENTIALS
GOOGLE
GITHUB
}

enum OtpType {
FORGOT_PASSWORD
RESET_PASSWORD
}

enum Role {
  USER
  ADMIN
}

enum ReviewStatus {
  PENDING
  APPROVED
  DECLINED
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
    id        String      @id @default(uuid())
    firstName String
    lastName String
    password String?
    picture  String?
    role  Role    @default(USER)
    authService AuthService  @default(CREDENTIALS)
    email  String         @unique
    phone String?          @unique
    isConfirmed Boolean?   @default(false)
    emailVerified DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    medias Media[]
    amenities Amenity[]
    amenityCategories AmenityCategory[]
    reviews Review[]
    reviewReactions ReviewReaction[]
    verificationTokens VerificationToken[]
    Otps Otp[]
    sessions  Session[]
    areas Area[]
}

model Session {
  id             String          @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  browser          String
  os                String
  invalidatedAt DateTime?
  expires      DateTime
  createdAt      DateTime      @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
    id        String      @id @default(uuid())
    slug      String    @unique
    name      String
    state     String
    lga       String
    address   String
    longitude Int
    latitude  Int
    views   Int?  @default(0)
    createdAt      DateTime      @default(now())
    updatedAt DateTime @updatedAt
    createdBy       User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById     String
    reviews Review[]
    medias   Media[]
}

model Amenity {
  id          String           @id @default(uuid())
  name        String  @unique
  createdBy        User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
  category    AmenityCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  reviews     Review[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model AmenityCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  amenities   Amenity[]  @relation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
   createdBy        User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
}

model Review {
id    String                 @id @default(uuid())
description String
rating      Int  @default(0)
status  ReviewStatus? @default(PENDING)
views   Int?  @default(0)
asAnonymous  Boolean? @default(false)
  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId String
     createdBy       User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById     String
amenities Amenity[]
  likeReactions    ReviewReaction[] @relation("LikeReaction")
  dislikeReactions ReviewReaction[] @relation("DislikeReaction")
createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewReaction {
  id                String        @id @default(uuid())
  type              ReactionType
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likeReview        Review?       @relation("LikeReaction", fields: [likeReviewId], references: [id], onDelete: Cascade)
  likeReviewId      String?
  dislikeReview     Review?       @relation("DislikeReaction", fields: [dislikeReviewId], references: [id], onDelete: Cascade)
  dislikeReviewId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([likeReviewId])
  @@index([dislikeReviewId])
  @@index([type])

  @@unique([userId, likeReviewId])
  @@unique([userId, dislikeReviewId])
}

model Media {
  id    String                 @id @default(uuid())
  src  String
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
}

model VerificationToken {
    id           String      @id @default(uuid())
    token      String   @unique
    expires    DateTime
    createdAt DateTime @default(now())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Otp {
    id           String      @id @default(uuid())
    otp      String   @unique
    expires    DateTime
    type    OtpType
    createdAt DateTime @default(now())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}


